/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lagrello.Client.OpenAPIDateConverter;

namespace lagrello.Model
{
    /// <summary>
    /// CreateTokenRequest
    /// </summary>
    [DataContract]
    public partial class CreateTokenRequest :  IEquatable<CreateTokenRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTokenRequest" /> class.
        /// </summary>
        /// <param name="tokenName">tokenName (required).</param>
        /// <param name="permissions">permissions.</param>
        public CreateTokenRequest(string tokenName = default(string), List<string> permissions = default(List<string>))
        {
            // to ensure "tokenName" is required (not null)
            if (tokenName == null)
            {
                throw new InvalidDataException("tokenName is a required property for CreateTokenRequest and cannot be null");
            }
            else
            {
                this.TokenName = tokenName;
            }

            this.Permissions = permissions;
        }

        /// <summary>
        /// Gets or Sets TokenName
        /// </summary>
        [DataMember(Name="tokenName", EmitDefaultValue=true)]
        public string TokenName { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTokenRequest {\n");
            sb.Append("  TokenName: ").Append(TokenName).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTokenRequest);
        }

        /// <summary>
        /// Returns true if CreateTokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTokenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenName == input.TokenName ||
                    (this.TokenName != null &&
                    this.TokenName.Equals(input.TokenName))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenName != null)
                    hashCode = hashCode * 59 + this.TokenName.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            yield break;
        }
    }

}
