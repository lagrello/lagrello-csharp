/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lagrello.Client.OpenAPIDateConverter;

namespace lagrello.Model
{
    /// <summary>
    /// TenantCompanyInfo
    /// </summary>
    [DataContract]
    public partial class TenantCompanyInfo :  IEquatable<TenantCompanyInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantCompanyInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TenantCompanyInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantCompanyInfo" /> class.
        /// </summary>
        /// <param name="name">The full name of your company. (required).</param>
        /// <param name="address">The first line of the address for your company. (required).</param>
        /// <param name="city">The city in which the address is located. (required).</param>
        /// <param name="postalCode">The postal code for the address. (required).</param>
        /// <param name="country">The country in which the address is located. This should be given as an ISO 3361-1 country code (two letter abbreviation). (required).</param>
        /// <param name="orgNumber">Your company&#39;s organization number. (required).</param>
        /// <param name="vATNumber">A value added tax identification number, identifier used in many countries, including the countries of the European Union, for value added tax purposes. (required).</param>
        public TenantCompanyInfo(string name = default(string), string address = default(string), string city = default(string), string postalCode = default(string), string country = default(string), string orgNumber = default(string), string vATNumber = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TenantCompanyInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for TenantCompanyInfo and cannot be null");
            }
            else
            {
                this.Address = address;
            }

            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new InvalidDataException("city is a required property for TenantCompanyInfo and cannot be null");
            }
            else
            {
                this.City = city;
            }

            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new InvalidDataException("postalCode is a required property for TenantCompanyInfo and cannot be null");
            }
            else
            {
                this.PostalCode = postalCode;
            }

            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for TenantCompanyInfo and cannot be null");
            }
            else
            {
                this.Country = country;
            }

            // to ensure "orgNumber" is required (not null)
            if (orgNumber == null)
            {
                throw new InvalidDataException("orgNumber is a required property for TenantCompanyInfo and cannot be null");
            }
            else
            {
                this.OrgNumber = orgNumber;
            }

            // to ensure "vATNumber" is required (not null)
            if (vATNumber == null)
            {
                throw new InvalidDataException("vATNumber is a required property for TenantCompanyInfo and cannot be null");
            }
            else
            {
                this.VATNumber = vATNumber;
            }

        }

        /// <summary>
        /// The full name of your company.
        /// </summary>
        /// <value>The full name of your company.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// The first line of the address for your company.
        /// </summary>
        /// <value>The first line of the address for your company.</value>
        [DataMember(Name="Address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// The city in which the address is located.
        /// </summary>
        /// <value>The city in which the address is located.</value>
        [DataMember(Name="City", EmitDefaultValue=true)]
        public string City { get; set; }

        /// <summary>
        /// The postal code for the address.
        /// </summary>
        /// <value>The postal code for the address.</value>
        [DataMember(Name="PostalCode", EmitDefaultValue=true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The country in which the address is located. This should be given as an ISO 3361-1 country code (two letter abbreviation).
        /// </summary>
        /// <value>The country in which the address is located. This should be given as an ISO 3361-1 country code (two letter abbreviation).</value>
        [DataMember(Name="Country", EmitDefaultValue=true)]
        public string Country { get; set; }

        /// <summary>
        /// Your company&#39;s organization number.
        /// </summary>
        /// <value>Your company&#39;s organization number.</value>
        [DataMember(Name="OrgNumber", EmitDefaultValue=true)]
        public string OrgNumber { get; set; }

        /// <summary>
        /// A value added tax identification number, identifier used in many countries, including the countries of the European Union, for value added tax purposes.
        /// </summary>
        /// <value>A value added tax identification number, identifier used in many countries, including the countries of the European Union, for value added tax purposes.</value>
        [DataMember(Name="VATNumber", EmitDefaultValue=true)]
        public string VATNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantCompanyInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  OrgNumber: ").Append(OrgNumber).Append("\n");
            sb.Append("  VATNumber: ").Append(VATNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantCompanyInfo);
        }

        /// <summary>
        /// Returns true if TenantCompanyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantCompanyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantCompanyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.OrgNumber == input.OrgNumber ||
                    (this.OrgNumber != null &&
                    this.OrgNumber.Equals(input.OrgNumber))
                ) && 
                (
                    this.VATNumber == input.VATNumber ||
                    (this.VATNumber != null &&
                    this.VATNumber.Equals(input.VATNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.OrgNumber != null)
                    hashCode = hashCode * 59 + this.OrgNumber.GetHashCode();
                if (this.VATNumber != null)
                    hashCode = hashCode * 59 + this.VATNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
