/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lagrello.Client.OpenAPIDateConverter;

namespace lagrello.Model
{
    /// <summary>
    /// ActivateTenantRequest
    /// </summary>
    [DataContract]
    public partial class ActivateTenantRequest :  IEquatable<ActivateTenantRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivateTenantRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivateTenantRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivateTenantRequest" /> class.
        /// </summary>
        /// <param name="companyName">The full name of your company. (required).</param>
        /// <param name="companyAddress">The first line of the address for your company. (required).</param>
        /// <param name="companyCity">The city in which the address is located. (required).</param>
        /// <param name="companyPostalCode">The postal code for the address. (required).</param>
        /// <param name="companyCountry">The country in which the address is located. This should be given as an ISO 3361-1 country code (two letter abbreviation). (required).</param>
        /// <param name="companyOrgNumber">Your company&#39;s organization number. (required).</param>
        /// <param name="companyVATNumber">A value added tax identification number, identifier used in many countries, including the countries of the European Union, for value added tax purposes. (required).</param>
        public ActivateTenantRequest(string companyName = default(string), string companyAddress = default(string), string companyCity = default(string), string companyPostalCode = default(string), string companyCountry = default(string), string companyOrgNumber = default(string), string companyVATNumber = default(string))
        {
            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new InvalidDataException("companyName is a required property for ActivateTenantRequest and cannot be null");
            }
            else
            {
                this.CompanyName = companyName;
            }

            // to ensure "companyAddress" is required (not null)
            if (companyAddress == null)
            {
                throw new InvalidDataException("companyAddress is a required property for ActivateTenantRequest and cannot be null");
            }
            else
            {
                this.CompanyAddress = companyAddress;
            }

            // to ensure "companyCity" is required (not null)
            if (companyCity == null)
            {
                throw new InvalidDataException("companyCity is a required property for ActivateTenantRequest and cannot be null");
            }
            else
            {
                this.CompanyCity = companyCity;
            }

            // to ensure "companyPostalCode" is required (not null)
            if (companyPostalCode == null)
            {
                throw new InvalidDataException("companyPostalCode is a required property for ActivateTenantRequest and cannot be null");
            }
            else
            {
                this.CompanyPostalCode = companyPostalCode;
            }

            // to ensure "companyCountry" is required (not null)
            if (companyCountry == null)
            {
                throw new InvalidDataException("companyCountry is a required property for ActivateTenantRequest and cannot be null");
            }
            else
            {
                this.CompanyCountry = companyCountry;
            }

            // to ensure "companyOrgNumber" is required (not null)
            if (companyOrgNumber == null)
            {
                throw new InvalidDataException("companyOrgNumber is a required property for ActivateTenantRequest and cannot be null");
            }
            else
            {
                this.CompanyOrgNumber = companyOrgNumber;
            }

            // to ensure "companyVATNumber" is required (not null)
            if (companyVATNumber == null)
            {
                throw new InvalidDataException("companyVATNumber is a required property for ActivateTenantRequest and cannot be null");
            }
            else
            {
                this.CompanyVATNumber = companyVATNumber;
            }

        }

        /// <summary>
        /// The full name of your company.
        /// </summary>
        /// <value>The full name of your company.</value>
        [DataMember(Name="companyName", EmitDefaultValue=true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The first line of the address for your company.
        /// </summary>
        /// <value>The first line of the address for your company.</value>
        [DataMember(Name="companyAddress", EmitDefaultValue=true)]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// The city in which the address is located.
        /// </summary>
        /// <value>The city in which the address is located.</value>
        [DataMember(Name="companyCity", EmitDefaultValue=true)]
        public string CompanyCity { get; set; }

        /// <summary>
        /// The postal code for the address.
        /// </summary>
        /// <value>The postal code for the address.</value>
        [DataMember(Name="companyPostalCode", EmitDefaultValue=true)]
        public string CompanyPostalCode { get; set; }

        /// <summary>
        /// The country in which the address is located. This should be given as an ISO 3361-1 country code (two letter abbreviation).
        /// </summary>
        /// <value>The country in which the address is located. This should be given as an ISO 3361-1 country code (two letter abbreviation).</value>
        [DataMember(Name="companyCountry", EmitDefaultValue=true)]
        public string CompanyCountry { get; set; }

        /// <summary>
        /// Your company&#39;s organization number.
        /// </summary>
        /// <value>Your company&#39;s organization number.</value>
        [DataMember(Name="companyOrgNumber", EmitDefaultValue=true)]
        public string CompanyOrgNumber { get; set; }

        /// <summary>
        /// A value added tax identification number, identifier used in many countries, including the countries of the European Union, for value added tax purposes.
        /// </summary>
        /// <value>A value added tax identification number, identifier used in many countries, including the countries of the European Union, for value added tax purposes.</value>
        [DataMember(Name="companyVATNumber", EmitDefaultValue=true)]
        public string CompanyVATNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivateTenantRequest {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  CompanyCity: ").Append(CompanyCity).Append("\n");
            sb.Append("  CompanyPostalCode: ").Append(CompanyPostalCode).Append("\n");
            sb.Append("  CompanyCountry: ").Append(CompanyCountry).Append("\n");
            sb.Append("  CompanyOrgNumber: ").Append(CompanyOrgNumber).Append("\n");
            sb.Append("  CompanyVATNumber: ").Append(CompanyVATNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivateTenantRequest);
        }

        /// <summary>
        /// Returns true if ActivateTenantRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivateTenantRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivateTenantRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                ) && 
                (
                    this.CompanyCity == input.CompanyCity ||
                    (this.CompanyCity != null &&
                    this.CompanyCity.Equals(input.CompanyCity))
                ) && 
                (
                    this.CompanyPostalCode == input.CompanyPostalCode ||
                    (this.CompanyPostalCode != null &&
                    this.CompanyPostalCode.Equals(input.CompanyPostalCode))
                ) && 
                (
                    this.CompanyCountry == input.CompanyCountry ||
                    (this.CompanyCountry != null &&
                    this.CompanyCountry.Equals(input.CompanyCountry))
                ) && 
                (
                    this.CompanyOrgNumber == input.CompanyOrgNumber ||
                    (this.CompanyOrgNumber != null &&
                    this.CompanyOrgNumber.Equals(input.CompanyOrgNumber))
                ) && 
                (
                    this.CompanyVATNumber == input.CompanyVATNumber ||
                    (this.CompanyVATNumber != null &&
                    this.CompanyVATNumber.Equals(input.CompanyVATNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyAddress != null)
                    hashCode = hashCode * 59 + this.CompanyAddress.GetHashCode();
                if (this.CompanyCity != null)
                    hashCode = hashCode * 59 + this.CompanyCity.GetHashCode();
                if (this.CompanyPostalCode != null)
                    hashCode = hashCode * 59 + this.CompanyPostalCode.GetHashCode();
                if (this.CompanyCountry != null)
                    hashCode = hashCode * 59 + this.CompanyCountry.GetHashCode();
                if (this.CompanyOrgNumber != null)
                    hashCode = hashCode * 59 + this.CompanyOrgNumber.GetHashCode();
                if (this.CompanyVATNumber != null)
                    hashCode = hashCode * 59 + this.CompanyVATNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
