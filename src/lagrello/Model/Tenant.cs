/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lagrello.Client.OpenAPIDateConverter;

namespace lagrello.Model
{
    /// <summary>
    /// Tenant is what you can call your account with lagrello. In your tenant you will store all the information about your account and all your users accounts.
    /// </summary>
    [DataContract]
    public partial class Tenant :  IEquatable<Tenant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tenant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tenant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tenant" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId (required).</param>
        /// <param name="tenantName">tenantName (required).</param>
        /// <param name="callbackUrl">callbackUrl (required).</param>
        /// <param name="companyInfo">companyInfo (required).</param>
        /// <param name="activated">activated (required).</param>
        public Tenant(Guid tenantId = default(Guid), string tenantName = default(string), string callbackUrl = default(string), TenantCompanyInfo companyInfo = default(TenantCompanyInfo), bool activated = default(bool))
        {
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new InvalidDataException("tenantId is a required property for Tenant and cannot be null");
            }
            else
            {
                this.TenantId = tenantId;
            }

            // to ensure "tenantName" is required (not null)
            if (tenantName == null)
            {
                throw new InvalidDataException("tenantName is a required property for Tenant and cannot be null");
            }
            else
            {
                this.TenantName = tenantName;
            }

            // to ensure "callbackUrl" is required (not null)
            if (callbackUrl == null)
            {
                throw new InvalidDataException("callbackUrl is a required property for Tenant and cannot be null");
            }
            else
            {
                this.CallbackUrl = callbackUrl;
            }

            // to ensure "companyInfo" is required (not null)
            if (companyInfo == null)
            {
                throw new InvalidDataException("companyInfo is a required property for Tenant and cannot be null");
            }
            else
            {
                this.CompanyInfo = companyInfo;
            }

            // to ensure "activated" is required (not null)
            if (activated == null)
            {
                throw new InvalidDataException("activated is a required property for Tenant and cannot be null");
            }
            else
            {
                this.Activated = activated;
            }

        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=true)]
        public Guid TenantId { get; set; }

        /// <summary>
        /// Gets or Sets TenantName
        /// </summary>
        [DataMember(Name="tenantName", EmitDefaultValue=true)]
        public string TenantName { get; set; }

        /// <summary>
        /// Gets or Sets CallbackUrl
        /// </summary>
        [DataMember(Name="callbackUrl", EmitDefaultValue=true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets CompanyInfo
        /// </summary>
        [DataMember(Name="companyInfo", EmitDefaultValue=true)]
        public TenantCompanyInfo CompanyInfo { get; set; }

        /// <summary>
        /// Gets or Sets Activated
        /// </summary>
        [DataMember(Name="activated", EmitDefaultValue=true)]
        public bool Activated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tenant {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  CompanyInfo: ").Append(CompanyInfo).Append("\n");
            sb.Append("  Activated: ").Append(Activated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tenant);
        }

        /// <summary>
        /// Returns true if Tenant instances are equal
        /// </summary>
        /// <param name="input">Instance of Tenant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tenant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.TenantName == input.TenantName ||
                    (this.TenantName != null &&
                    this.TenantName.Equals(input.TenantName))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.CompanyInfo == input.CompanyInfo ||
                    (this.CompanyInfo != null &&
                    this.CompanyInfo.Equals(input.CompanyInfo))
                ) && 
                (
                    this.Activated == input.Activated ||
                    (this.Activated != null &&
                    this.Activated.Equals(input.Activated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.CompanyInfo != null)
                    hashCode = hashCode * 59 + this.CompanyInfo.GetHashCode();
                if (this.Activated != null)
                    hashCode = hashCode * 59 + this.Activated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            yield break;
        }
    }

}
