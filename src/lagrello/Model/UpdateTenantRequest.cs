/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lagrello.Client.OpenAPIDateConverter;

namespace lagrello.Model
{
    /// <summary>
    /// UpdateTenantRequest
    /// </summary>
    [DataContract]
    public partial class UpdateTenantRequest :  IEquatable<UpdateTenantRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateTenantRequest" /> class.
        /// </summary>
        /// <param name="callbackUrl">This callback address will be used when using the email authentication method. When the end user will have this callback address send to them with the authentication key. In the callback address you need to specify where you want to the auth token to be placed. Specify where in the uri you want to accept the auth token that will then be verified with Lagrello. To specify where you will use these two characters {}..</param>
        public UpdateTenantRequest(string callbackUrl = default(string))
        {
            this.CallbackUrl = callbackUrl;
        }

        /// <summary>
        /// This callback address will be used when using the email authentication method. When the end user will have this callback address send to them with the authentication key. In the callback address you need to specify where you want to the auth token to be placed. Specify where in the uri you want to accept the auth token that will then be verified with Lagrello. To specify where you will use these two characters {}.
        /// </summary>
        /// <value>This callback address will be used when using the email authentication method. When the end user will have this callback address send to them with the authentication key. In the callback address you need to specify where you want to the auth token to be placed. Specify where in the uri you want to accept the auth token that will then be verified with Lagrello. To specify where you will use these two characters {}.</value>
        [DataMember(Name="callbackUrl", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateTenantRequest {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateTenantRequest);
        }

        /// <summary>
        /// Returns true if UpdateTenantRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateTenantRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateTenantRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
