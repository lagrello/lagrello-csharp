/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lagrello.Client.OpenAPIDateConverter;

namespace lagrello.Model
{
    /// <summary>
    /// CreateTenantRequest
    /// </summary>
    [DataContract]
    public partial class CreateTenantRequest :  IEquatable<CreateTenantRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTenantRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTenantRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTenantRequest" /> class.
        /// </summary>
        /// <param name="tenantName">The name of the tenant should preferably be the name of your organization/company. Does not need to be but your end users will see this name. (required).</param>
        /// <param name="adminEmail">Email to the person that will be tenant admin. (required).</param>
        public CreateTenantRequest(string tenantName = default(string), string adminEmail = default(string))
        {
            // to ensure "tenantName" is required (not null)
            if (tenantName == null)
            {
                throw new InvalidDataException("tenantName is a required property for CreateTenantRequest and cannot be null");
            }
            else
            {
                this.TenantName = tenantName;
            }

            // to ensure "adminEmail" is required (not null)
            if (adminEmail == null)
            {
                throw new InvalidDataException("adminEmail is a required property for CreateTenantRequest and cannot be null");
            }
            else
            {
                this.AdminEmail = adminEmail;
            }

        }

        /// <summary>
        /// The name of the tenant should preferably be the name of your organization/company. Does not need to be but your end users will see this name.
        /// </summary>
        /// <value>The name of the tenant should preferably be the name of your organization/company. Does not need to be but your end users will see this name.</value>
        [DataMember(Name="tenantName", EmitDefaultValue=true)]
        public string TenantName { get; set; }

        /// <summary>
        /// Email to the person that will be tenant admin.
        /// </summary>
        /// <value>Email to the person that will be tenant admin.</value>
        [DataMember(Name="adminEmail", EmitDefaultValue=true)]
        public string AdminEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTenantRequest {\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("  AdminEmail: ").Append(AdminEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTenantRequest);
        }

        /// <summary>
        /// Returns true if CreateTenantRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTenantRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTenantRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantName == input.TenantName ||
                    (this.TenantName != null &&
                    this.TenantName.Equals(input.TenantName))
                ) && 
                (
                    this.AdminEmail == input.AdminEmail ||
                    (this.AdminEmail != null &&
                    this.AdminEmail.Equals(input.AdminEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                if (this.AdminEmail != null)
                    hashCode = hashCode * 59 + this.AdminEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            yield break;
        }
    }

}
