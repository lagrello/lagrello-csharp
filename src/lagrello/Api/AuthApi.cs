/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using lagrello.Client;
using lagrello.Model;

namespace lagrello.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gives back user data for the magic link token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <returns>User</returns>
        User UsersEmailAuth (string payload);

        /// <summary>
        /// Gives back user data for the magic link token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersEmailAuthWithHttpInfo (string payload);
        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <returns></returns>
        void UsersEmailSend (string userId);

        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersEmailSendWithHttpInfo (string userId);
        /// <summary>
        /// Verify users TOTP token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <returns>User</returns>
        User UsersTotpAuth (string userId, string payload);

        /// <summary>
        /// Verify users TOTP token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersTotpAuthWithHttpInfo (string userId, string payload);
        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user
        /// </summary>
        /// <remarks>
        /// When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <returns>TotpEnableResponse</returns>
        TotpEnableResponse UsersTotpToggle (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest));

        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user
        /// </summary>
        /// <remarks>
        /// When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <returns>ApiResponse of TotpEnableResponse</returns>
        ApiResponse<TotpEnableResponse> UsersTotpToggleWithHttpInfo (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gives back user data for the magic link token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersEmailAuthAsync (string payload, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gives back user data for the magic link token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersEmailAuthWithHttpInfoAsync (string payload, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersEmailSendAsync (string userId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersEmailSendWithHttpInfoAsync (string userId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify users TOTP token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersTotpAuthAsync (string userId, string payload, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verify users TOTP token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersTotpAuthWithHttpInfoAsync (string userId, string payload, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user
        /// </summary>
        /// <remarks>
        /// When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TotpEnableResponse</returns>
        System.Threading.Tasks.Task<TotpEnableResponse> UsersTotpToggleAsync (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user
        /// </summary>
        /// <remarks>
        /// When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TotpEnableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotpEnableResponse>> UsersTotpToggleWithHttpInfoAsync (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthApi : IAuthApi
    {
        private lagrello.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi(String basePath)
        {
            this.Configuration = new lagrello.Client.Configuration { BasePath = basePath };

            ExceptionFactory = lagrello.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthApi()
        {
            this.Configuration = lagrello.Client.Configuration.Default;

            ExceptionFactory = lagrello.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthApi(lagrello.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = lagrello.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = lagrello.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public lagrello.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public lagrello.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gives back user data for the magic link token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <returns>User</returns>
        public User UsersEmailAuth (string payload)
        {
             ApiResponse<User> localVarResponse = UsersEmailAuthWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gives back user data for the magic link token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersEmailAuthWithHttpInfo (string payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling AuthApi->UsersEmailAuth");

            var localVarPath = "/v1/users/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payload", payload)); // query parameter

            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersEmailAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Gives back user data for the magic link token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersEmailAuthAsync (string payload, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<User> localVarResponse = await UsersEmailAuthWithHttpInfoAsync(payload, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gives back user data for the magic link token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">The magic link token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersEmailAuthWithHttpInfoAsync (string payload, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling AuthApi->UsersEmailAuth");

            var localVarPath = "/v1/users/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payload", payload)); // query parameter

            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersEmailAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <returns></returns>
        public void UsersEmailSend (string userId)
        {
             UsersEmailSendWithHttpInfo(userId);
        }

        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersEmailSendWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthApi->UsersEmailSend");

            var localVarPath = "/v1/users/{userId}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersEmailSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersEmailSendAsync (string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UsersEmailSendWithHttpInfoAsync(userId, cancellationToken);

        }

        /// <summary>
        /// This endpoint will be used when you want to send a magic login link to specified user 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to send magic link to</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersEmailSendWithHttpInfoAsync (string userId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthApi->UsersEmailSend");

            var localVarPath = "/v1/users/{userId}/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersEmailSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Verify users TOTP token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <returns>User</returns>
        public User UsersTotpAuth (string userId, string payload)
        {
             ApiResponse<User> localVarResponse = UsersTotpAuthWithHttpInfo(userId, payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify users TOTP token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersTotpAuthWithHttpInfo (string userId, string payload)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthApi->UsersTotpAuth");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling AuthApi->UsersTotpAuth");

            var localVarPath = "/v1/users/{userId}/totp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (payload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payload", payload)); // query parameter

            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersTotpAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Verify users TOTP token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersTotpAuthAsync (string userId, string payload, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<User> localVarResponse = await UsersTotpAuthWithHttpInfoAsync(userId, payload, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify users TOTP token 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to verify TOTP code for</param>
        /// <param name="payload">The totp token the user sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersTotpAuthWithHttpInfoAsync (string userId, string payload, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthApi->UsersTotpAuth");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling AuthApi->UsersTotpAuth");

            var localVarPath = "/v1/users/{userId}/totp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (payload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payload", payload)); // query parameter

            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersTotpAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <returns>TotpEnableResponse</returns>
        public TotpEnableResponse UsersTotpToggle (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest))
        {
             ApiResponse<TotpEnableResponse> localVarResponse = UsersTotpToggleWithHttpInfo(userId, totpEnableRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <returns>ApiResponse of TotpEnableResponse</returns>
        public ApiResponse<TotpEnableResponse> UsersTotpToggleWithHttpInfo (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthApi->UsersTotpToggle");

            var localVarPath = "/v1/users/{userId}/totp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (totpEnableRequest != null && totpEnableRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(totpEnableRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = totpEnableRequest; // byte array
            }

            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersTotpToggle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TotpEnableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TotpEnableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TotpEnableResponse)));
        }

        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TotpEnableResponse</returns>
        public async System.Threading.Tasks.Task<TotpEnableResponse> UsersTotpToggleAsync (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TotpEnableResponse> localVarResponse = await UsersTotpToggleWithHttpInfoAsync(userId, totpEnableRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enables or disables Time-based One-Time Password authentication method for specified user When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Id of the user you want to enable TOTP for</param>
        /// <param name="totpEnableRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TotpEnableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TotpEnableResponse>> UsersTotpToggleWithHttpInfoAsync (string userId, TotpEnableRequest totpEnableRequest = default(TotpEnableRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthApi->UsersTotpToggle");

            var localVarPath = "/v1/users/{userId}/totp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (totpEnableRequest != null && totpEnableRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(totpEnableRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = totpEnableRequest; // byte array
            }

            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersTotpToggle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TotpEnableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TotpEnableResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TotpEnableResponse)));
        }

    }
}
