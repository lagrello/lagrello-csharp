/*
 * Lagrello API
 *
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using lagrello.Client;
using lagrello.Model;

namespace lagrello.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Updates tenant information
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <returns>Tenant</returns>
        Tenant TenantUpdate (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest));

        /// <summary>
        /// Updates tenant information
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> TenantUpdateWithHttpInfo (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest));
        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <returns>Tenant</returns>
        Tenant TenantsActivate (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest));

        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> TenantsActivateWithHttpInfo (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest));
        /// <summary>
        /// Creates new tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <returns>Tenant</returns>
        Tenant TenantsCreate (CreateTenantRequest createTenantRequest = default(CreateTenantRequest));

        /// <summary>
        /// Creates new tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> TenantsCreateWithHttpInfo (CreateTenantRequest createTenantRequest = default(CreateTenantRequest));
        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant
        /// </summary>
        /// <remarks>
        /// This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Tenant</returns>
        Tenant TenantsCreate_0 ();

        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant
        /// </summary>
        /// <remarks>
        /// This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> TenantsCreate_0WithHttpInfo ();
        /// <summary>
        /// Returns the tenant information the caller is part of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Tenant</returns>
        Tenant TenantsGet ();

        /// <summary>
        /// Returns the tenant information the caller is part of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> TenantsGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Updates tenant information
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> TenantUpdateAsync (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates tenant information
        /// </summary>
        /// <remarks>
        /// This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantUpdateWithHttpInfoAsync (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> TenantsActivateAsync (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsActivateWithHttpInfoAsync (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates new tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> TenantsCreateAsync (CreateTenantRequest createTenantRequest = default(CreateTenantRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates new tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsCreateWithHttpInfoAsync (CreateTenantRequest createTenantRequest = default(CreateTenantRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant
        /// </summary>
        /// <remarks>
        /// This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> TenantsCreate_0Async (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant
        /// </summary>
        /// <remarks>
        /// This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsCreate_0WithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the tenant information the caller is part of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> TenantsGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the tenant information the caller is part of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TenantsApi : ITenantsApi
    {
        private lagrello.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantsApi(String basePath)
        {
            this.Configuration = new lagrello.Client.Configuration { BasePath = basePath };

            ExceptionFactory = lagrello.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TenantsApi()
        {
            this.Configuration = lagrello.Client.Configuration.Default;

            ExceptionFactory = lagrello.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TenantsApi(lagrello.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = lagrello.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = lagrello.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public lagrello.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public lagrello.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Updates tenant information This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <returns>Tenant</returns>
        public Tenant TenantUpdate (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest))
        {
             ApiResponse<Tenant> localVarResponse = TenantUpdateWithHttpInfo(updateTenantRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates tenant information This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <returns>ApiResponse of Tenant</returns>
        public ApiResponse<Tenant> TenantUpdateWithHttpInfo (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest))
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateTenantRequest != null && updateTenantRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTenantRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTenantRequest; // byte array
            }

            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Updates tenant information This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> TenantUpdateAsync (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Tenant> localVarResponse = await TenantUpdateWithHttpInfoAsync(updateTenantRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates tenant information This endpoint is used to update certain information about your tenant. For example if you want to update your tenant&#39;s callback URL you will do that here.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantUpdateWithHttpInfoAsync (UpdateTenantRequest updateTenantRequest = default(UpdateTenantRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateTenantRequest != null && updateTenantRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTenantRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTenantRequest; // byte array
            }

            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <returns>Tenant</returns>
        public Tenant TenantsActivate (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest))
        {
             ApiResponse<Tenant> localVarResponse = TenantsActivateWithHttpInfo(activateTenantRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <returns>ApiResponse of Tenant</returns>
        public ApiResponse<Tenant> TenantsActivateWithHttpInfo (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest))
        {

            var localVarPath = "/v1/tenant/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activateTenantRequest != null && activateTenantRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(activateTenantRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = activateTenantRequest; // byte array
            }

            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsActivate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> TenantsActivateAsync (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Tenant> localVarResponse = await TenantsActivateWithHttpInfoAsync(activateTenantRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activates the tenant, checks that all necessary information to activate a tenant is included 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsActivateWithHttpInfoAsync (ActivateTenantRequest activateTenantRequest = default(ActivateTenantRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/tenant/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activateTenantRequest != null && activateTenantRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(activateTenantRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = activateTenantRequest; // byte array
            }

            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsActivate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Creates new tenant 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <returns>Tenant</returns>
        public Tenant TenantsCreate (CreateTenantRequest createTenantRequest = default(CreateTenantRequest))
        {
             ApiResponse<Tenant> localVarResponse = TenantsCreateWithHttpInfo(createTenantRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new tenant 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <returns>ApiResponse of Tenant</returns>
        public ApiResponse<Tenant> TenantsCreateWithHttpInfo (CreateTenantRequest createTenantRequest = default(CreateTenantRequest))
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTenantRequest != null && createTenantRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTenantRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTenantRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Creates new tenant 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> TenantsCreateAsync (CreateTenantRequest createTenantRequest = default(CreateTenantRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Tenant> localVarResponse = await TenantsCreateWithHttpInfoAsync(createTenantRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new tenant 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsCreateWithHttpInfoAsync (CreateTenantRequest createTenantRequest = default(CreateTenantRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTenantRequest != null && createTenantRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTenantRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTenantRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Tenant</returns>
        public Tenant TenantsCreate_0 ()
        {
             ApiResponse<Tenant> localVarResponse = TenantsCreate_0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Tenant</returns>
        public ApiResponse<Tenant> TenantsCreate_0WithHttpInfo ()
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsCreate_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> TenantsCreate_0Async (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Tenant> localVarResponse = await TenantsCreate_0WithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes tenant caller is part of, will send verification email before deleting tenant This endpoint will delete your tenant. Will send an email to the admin email address of the tenant confirming that you want to delete your tenant before deletion.
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsCreate_0WithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsCreate_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Returns the tenant information the caller is part of 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Tenant</returns>
        public Tenant TenantsGet ()
        {
             ApiResponse<Tenant> localVarResponse = TenantsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the tenant information the caller is part of 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Tenant</returns>
        public ApiResponse<Tenant> TenantsGetWithHttpInfo ()
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (token) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

        /// <summary>
        /// Returns the tenant information the caller is part of 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> TenantsGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Tenant> localVarResponse = await TenantsGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the tenant information the caller is part of 
        /// </summary>
        /// <exception cref="lagrello.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tenant>> TenantsGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/tenant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (token) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenant)));
        }

    }
}
